Filename: C:\Users\maman\desktop\atlas\atlas\atlas\settings.py
"""
Django settings for atlas project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#)e3k!iv6*t#^paao83&)0a0%hf=xu5lg8(%r1+3)n3w7q=c&-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'finalproject',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
}

IGDB_CLIENT_ID = 'kigzb47i9x1pw53j474utzpiav1j71'
IGDB_CLIENT_SECRET = 'ncvlewavbbg6ourdl0no5i7gf7308e'
IGDB_REDIRECT_URI = 'http://localhost:8000/api/igdb-oauth-callback/'
FRONTEND_URL = 'http://localhost:3000'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',
]

ROOT_URLCONF = 'atlas.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'atlas.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



Filename: C:\Users\maman\desktop\atlas\atlas\atlas\urls.py
"""
URL configuration for atlas project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('finalproject.urls')),
]



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\migrations\0001_initial.py
# Generated by Django 4.2.6 on 2024-04-24 10:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'game_id')},
            },
        ),
    ]



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\migrations\0002_collection_collectiongame.py
# Generated by Django 4.2.6 on 2024-04-25 06:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('finalproject', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CollectionGame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.IntegerField()),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finalproject.collection')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
    ]



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\migrations\0003_collectionupvote.py
# Generated by Django 4.2.6 on 2024-04-29 09:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('finalproject', '0002_collection_collectiongame'),
    ]

    operations = [
        migrations.CreateModel(
            name='CollectionUpvote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finalproject.collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'collection')},
            },
        ),
    ]



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\migrations\0004_rename_favorite_favourite.py
# Generated by Django 4.2.6 on 2024-05-06 03:57

from django.conf import settings
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('finalproject', '0003_collectionupvote'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='Favorite',
            new_name='Favourite',
        ),
    ]



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\igdb_api.py
from rest_framework.decorators import api_view
from rest_framework.response import Response
import requests

IGDB_API_KEY = 'jchii2xwro1730ovglxhrnq0m1njcz'
IGDB_CLIENT_ID = 'kigzb47i9x1pw53j474utzpiav1j71'
IGDB_API_URL = 'https://api.igdb.com/v4'

def igdb_api_request(endpoint, query):
    url = f'{IGDB_API_URL}/{endpoint}'
    headers = {
        'Client-ID': IGDB_CLIENT_ID,
        'Authorization': f'Bearer {IGDB_API_KEY}',
    }
    data = query.encode('utf-8')
    response = requests.post(url, headers=headers, data=data)
    response_json = response.json()

    # debugging
    print(f"API Response for {query}: {response_json}")

    return response_json

def search_games(query, page=1, games_per_page=20):
    offset = (page - 1) * games_per_page
    limit = games_per_page

    endpoint = 'games'
    query = f'search "{query}"; fields name, cover.url, genres.name, involved_companies.company.name; limit {limit}; offset {offset};'
    response = igdb_api_request(endpoint, query)

    games = []
    for game in response:
        cover_url = game.get('cover', {}).get('url', '')
        genres = [genre['name'] for genre in game.get('genres', [])]
        companies = [company['company']['name'] for company in game.get('involved_companies', [])]

        games.append({
            'id': game['id'],
            'name': game['name'],
            'cover': cover_url,
            'genres': genres,
            'companies': companies,
        })

    return {
        'count': len(response),
        'results': games,
    }


Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\models.py
from django.db import models
from django.contrib.auth.models import User

# Represents a game that a user has marked as a favourite. Each user-game pair must be unique.
class Favourite(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    game_id = models.IntegerField()

    class Meta:
        app_label = 'finalproject'
        unique_together = ('user', 'game_id')

# Represents a collection of games created by a user.
class Collection(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    title = models.CharField(max_length=100)
    description = models.TextField(blank=True)

# Represents a game that is part of a user's collection, including its order in the collection.
class CollectionGame(models.Model):
    collection = models.ForeignKey(Collection, on_delete=models.CASCADE)
    game_id = models.IntegerField()
    description = models.TextField(blank=True)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']

# Represents an upvote that a user has given to a collection. Each user-collection pair must be unique.
class CollectionUpvote(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    collection = models.ForeignKey(Collection, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'collection')



Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\serializers.py
from rest_framework import serializers
from django.contrib.auth.models import User
from rest_framework.validators import UniqueValidator
from django.contrib.auth.password_validation import validate_password
from .models import Collection, CollectionGame, CollectionUpvote

class UserRegistrationSerializer(serializers.ModelSerializer):
    email = serializers.EmailField(
        required=True,
        validators=[UniqueValidator(queryset=User.objects.all())]
    )
    password = serializers.CharField(
        write_only=True, required=True, validators=[validate_password]
    )
    password2 = serializers.CharField(write_only=True, required=True)
    first_name = serializers.CharField(required=True)
    last_name = serializers.CharField(required=True)

    class Meta:
        model = User
        fields = ('username', 'email', 'password', 'password2', 'first_name', 'last_name')

    def create(self, validated_data):
        user = User.objects.create(
            username=validated_data['username'],
            email=validated_data['email'],
            first_name=validated_data['first_name'],
            last_name=validated_data['last_name']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user


class UserLoginSerializer(serializers.Serializer):
    username = serializers.CharField()
    password = serializers.CharField()

class UserProfileSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=False)

    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'first_name', 'last_name', 'password')

    def update(self, instance, validated_data):
        password = validated_data.pop('password', None)
        user = super().update(instance, validated_data)
        if password:
            user.set_password(password)
            user.save()
        return user
    
class CollectionSerializer(serializers.ModelSerializer):
    user = serializers.ReadOnlyField(source='user.id')
    upvote_count = serializers.SerializerMethodField()

    class Meta:
        model = Collection
        fields = ['id', 'title', 'description', 'user', 'upvote_count']

    def get_upvote_count(self, obj):
        return obj.collectionupvote_set.count()

class CollectionGameSerializer(serializers.ModelSerializer):
    class Meta:
        model = CollectionGame
        fields = ['id', 'game_id', 'description', 'order']

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username']


class CollectionUpvoteSerializer(serializers.ModelSerializer):
    class Meta:
        model = CollectionUpvote
        fields = ['id', 'created_at']


Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\urls.py
from django.urls import path
from .views import UserRegistrationView, UserLoginView, UserProfileView, validate_password, igdb_oauth_callback, \
    search_games_view, game_details_view, toggle_favourite, check_favourite, get_favourite, CollectionGameListCreateView, \
    CollectionGameRetrieveUpdateDestroyView, CollectionListCreateView, CollectionRetrieveUpdateDestroyView, get_games_by_ids, UserSearchView, \
    UserCollectionsView, CollectionOwnershipCheck, CollectionUpvoteView, TopCollectionsView, delete_collection_game

urlpatterns = [
    path('register/', UserRegistrationView.as_view(), name='user-registration'),
    path('login/', UserLoginView.as_view(), name='user-login'),
    path('profile/', UserProfileView.as_view(), name='user-profile'),
    path('validate-password/', validate_password, name='validate-password'),
    path('igdb-oauth-callback/', igdb_oauth_callback, name='igdb-oauth-callback'),
    path('search/', search_games_view, name='search-games'),
    path('games/<int:game_id>/', game_details_view, name='game-details'),
    path('toggle-favourite/', toggle_favourite, name='toggle-favourite'),
    path('check-favourite/', check_favourite, name='check-favourite'),
    path('favourites/', get_favourite, name='get-favourites'),
    path('collections/', CollectionListCreateView.as_view(), name='collection-list-create'),
    path('collections/<int:pk>/', CollectionRetrieveUpdateDestroyView.as_view(), name='collection-retrieve-update-destroy'),
    path('collections/<int:collection_id>/games/', CollectionGameListCreateView.as_view(), name='collection-game-list-create'),
    path('collections/<int:collection_id>/games/<int:pk>/', CollectionGameRetrieveUpdateDestroyView.as_view(), name='collection-game-retrieve-update-destroy'),
    path('games/', get_games_by_ids, name='get-games-by-ids'),
    path('search-users/', UserSearchView.as_view(), name='search-users'),
    path('users/<int:user_id>/collections/', UserCollectionsView.as_view(), name='user-collections'),
    path('collections/<int:pk>/check-ownership/', CollectionOwnershipCheck.as_view(), name='collection-ownership-check'),
    path('collections/<int:collection_id>/upvote/', CollectionUpvoteView.as_view(), name='collection-upvote'),
    path('top-collections/', TopCollectionsView.as_view(), name='top-collections'),
    path('collections/<int:collection_id>/games/<int:game_id>/delete/', delete_collection_game, name='collection-game-delete'),
]


Filename: C:\Users\maman\desktop\atlas\atlas\finalproject\views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.conf import settings
from django.http import JsonResponse
from rest_framework import generics, status, permissions, serializers
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.db.models import Count
from .serializers import UserRegistrationSerializer, UserLoginSerializer, UserProfileSerializer, CollectionSerializer, CollectionGameSerializer, UserSerializer, CollectionUpvoteSerializer
from .igdb_api import search_games, igdb_api_request
from .models import Favourite, Collection, CollectionGame, CollectionUpvote
import requests

class UserSearchView(generics.ListAPIView):
    serializer_class = UserSerializer

    def get_queryset(self):
        query = self.request.GET.get('query', '')
        return User.objects.filter(username__icontains=query)

class UserCollectionsView(generics.ListAPIView):
    serializer_class = CollectionSerializer

    def get_queryset(self):
        user_id = self.kwargs['user_id']
        return Collection.objects.filter(user_id=user_id)

class CollectionListCreateView(generics.ListCreateAPIView):
    serializer_class = CollectionSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        return Collection.objects.filter(user=self.request.user)

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

class CollectionRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Collection.objects.all()
    serializer_class = CollectionSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        collection = super().get_object()
        if collection.user != self.request.user:
            self.permission_classes = [permissions.IsAuthenticatedOrReadOnly]
        return collection

class CollectionGameListCreateView(generics.ListCreateAPIView):
    serializer_class = CollectionGameSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        collection_id = self.kwargs['collection_id']
        collection = Collection.objects.get(id=collection_id)
        if collection.user != self.request.user:
            self.permission_classes = [permissions.IsAuthenticatedOrReadOnly]
        return CollectionGame.objects.filter(collection_id=collection_id)

    def perform_create(self, serializer):
        collection_id = self.kwargs['collection_id']
        serializer.save(collection_id=collection_id)

class CollectionGameRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = CollectionGameSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        collection_id = self.kwargs['collection_id']
        return CollectionGame.objects.filter(collection_id=collection_id)
    
class CollectionOwnershipCheck(generics.GenericAPIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, *args, **kwargs):
        collection_id = self.kwargs['pk']
        collection = Collection.objects.get(id=collection_id)
        is_owner = collection.user == request.user
        return Response({'is_owner': is_owner})
    
class CollectionUpvoteView(generics.GenericAPIView):
    serializer_class = CollectionUpvoteSerializer
    permission_classes = [IsAuthenticated]

    def get(self, request, collection_id):
        collection = get_object_or_404(Collection, id=collection_id)
        user = request.user

        is_upvoted = CollectionUpvote.objects.filter(user=user, collection=collection).exists()
        upvote_count = collection.collectionupvote_set.count()

        return Response({'is_upvoted': is_upvoted, 'upvote_count': upvote_count}, status=status.HTTP_200_OK)

    def post(self, request, collection_id):
        collection = get_object_or_404(Collection, id=collection_id)
        user = request.user

        # Check if the user has already upvoted the collection
        if CollectionUpvote.objects.filter(user=user, collection=collection).exists():
            # If the user has already upvoted, remove the upvote
            CollectionUpvote.objects.filter(user=user, collection=collection).delete()
            return Response({'message': 'Upvote removed', 'upvote_count': collection.collectionupvote_set.count()}, status=status.HTTP_200_OK)
        else:
            # If the user has not upvoted, create a new upvote
            serializer = self.serializer_class(data=request.data)
            serializer.is_valid(raise_exception=True)
            serializer.save(user=user, collection=collection)
            return Response({'message': 'Upvote added', 'upvote_count': collection.collectionupvote_set.count()}, status=status.HTTP_201_CREATED)
    
class TopCollectionsView(generics.ListAPIView):
    serializer_class = CollectionSerializer

    def get_queryset(self):
        return Collection.objects.annotate(upvote_count=Count('collectionupvote')).filter(upvote_count__gte=3).order_by('-upvote_count')

    def post(self, request, collection_id):
        collection = get_object_or_404(Collection, id=collection_id)
        user = request.user

        # Check if the user has already upvoted the collection
        if CollectionUpvote.objects.filter(user=user, collection=collection).exists():
            # If the user has already upvoted, remove the upvote
            CollectionUpvote.objects.filter(user=user, collection=collection).delete()
            return Response({'message': 'Upvote removed', 'upvote_count': collection.collectionupvote_set.count()}, status=status.HTTP_200_OK)
        else:
            # If the user has not upvoted, create a new upvote
            serializer = self.serializer_class(data=request.data)
            serializer.is_valid(raise_exception=True)
            serializer.save(user=user, collection=collection)
            return Response({'message': 'Upvote added', 'upvote_count': collection.collectionupvote_set.count()}, status=status.HTTP_201_CREATED)
        
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_favourite(request):
    user = request.user
    game_id = request.GET.get('game_id')

    if not game_id:
        return Response({'error': 'Game ID is required.'}, status=400)

    is_favourite = Favourite.objects.filter(user=user, game_id=game_id).exists()

    return Response({'is_favourite': is_favourite})

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def toggle_favourite(request):
    user = request.user
    game_id = request.data.get('game_id')

    if not game_id:
        return Response({'error': 'Game ID is required.'}, status=400)

    favourite, created = Favourite.objects.get_or_create(user=user, game_id=game_id)

    if not created:
        favourite.delete()

    return Response({'is_favourite': created})

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_favourite(request):
    user = request.user
    favourite = Favourite.objects.filter(user=user)

    game_ids = [favourite.game_id for favourite in favourite]

    if game_ids:
        endpoint = 'games'
        query = f'fields name, cover.url, rating; where id = ({",".join(str(game_id) for game_id in game_ids)}); limit 200;'
        games = igdb_api_request(endpoint, query)
        for game in games:
            cover_url = game.get('cover', {}).get('url', '')
            if cover_url:
                game['cover']['url'] = cover_url.replace('t_thumb', 't_cover_big')
    else:
        games = []

    return Response(games)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def validate_password(request):
    user = request.user
    password = request.data.get('password')
    if user.check_password(password):
        return Response({'valid': True})
    else:
        return Response({'valid': False}, status=status.HTTP_400_BAD_REQUEST)
    
@api_view(['GET'])
def search_games_view(request):
    query = request.GET.get('query', '')
    search_type = request.GET.get('type', 'title')

    games = search_games(query, search_type) 
    return Response({'results': games})

@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_collection_game(request, collection_id, game_id):
    try:
        collection_game = CollectionGame.objects.get(collection_id=collection_id, game_id=game_id)
        if collection_game.collection.user != request.user:
            return Response({'error': 'You do not have permission to delete this game from the collection.'}, status=status.HTTP_403_FORBIDDEN)
        collection_game.delete()
        return Response({'message': 'Game removed from the collection successfully.'}, status=status.HTTP_204_NO_CONTENT)
    except CollectionGame.DoesNotExist:
        return Response({'error': 'Game not found in the collection.'}, status=status.HTTP_404_NOT_FOUND)


def search_games(query, search_type='title'):
    endpoint = 'games'
    base_query = f'fields id, name, cover.url, cover.image_id, involved_companies.company.name, involved_companies.developer, involved_companies.publisher, genres.name, platforms.name, rating; limit 200;'

    if search_type == 'title':
        query_string = f'{base_query} where name ~ *"{query}"*; sort rating desc;'
    elif search_type == 'developer':
        query_string = f'{base_query} where involved_companies.company.name ~ *"{query}"*; sort rating desc;'

    response = igdb_api_request(endpoint, query_string)
    print(f"API Response: {response}")

    games = []
    for game in response:
        if 'id' not in game:
            continue

        image_id = game.get('cover', {}).get('image_id', '')
        cover_url = f"https://images.igdb.com/igdb/image/upload/t_cover_big/{image_id}.jpg" if image_id else ''
        genres = [genre['name'] for genre in game.get('genres', []) if 'name' in genre]
        platforms = [platform['name'] for platform in game.get('platforms', []) if 'name' in platform]
        rating = float(game.get('rating', 0))

        developers = []
        publishers = []
        for company in game.get('involved_companies', []):
            if 'company' in company:
                if company.get('developer', False):
                    developers.append(company['company'].get('name', ''))
                if company.get('publisher', False):
                    publishers.append(company['company'].get('name', ''))

        games.append({
            'id': game['id'],
            'name': game['name'],
            'cover': cover_url,
            'genres': genres,
            'developers': developers,
            'publishers': publishers,
            'platforms': platforms,
            'rating': rating
        })

    return games

@api_view(['GET'])
def get_games_by_ids(request):
    game_ids = request.GET.get('ids', '').split(',')
    game_ids = [int(id) for id in game_ids if id.strip()]

    if not game_ids:
        return Response({'error': 'No game IDs provided.'}, status=400)

    endpoint = 'games'
    query = f'fields name, cover.url, rating, summary, genres.name, platforms.name; where id = ({",".join(str(game_id) for game_id in game_ids)}); limit 200;'
    games = igdb_api_request(endpoint, query)

    for game in games:
        cover_url = game.get('cover', {}).get('url', '')
        if cover_url:
            game['cover'] = cover_url.replace('t_thumb', 't_cover_big')
        genres = ', '.join(genre['name'] for genre in game.get('genres', []))
        game['genres'] = genres
        platforms = ', '.join(platform['name'] for platform in game.get('platforms', []))
        game['platforms'] = platforms

    return Response(games)

def game_details_view(request, game_id):
    endpoint = 'games'
    query = f'fields name, first_release_date, genres.name, platforms.name, summary, cover.url, rating, videos.video_id, websites.url; where id = {game_id};'
    response = igdb_api_request(endpoint, query)

    if response:
        game_data = response[0]  # Assuming the first item in the response is the game data
        
        # Use the cover_big size for the cover image URL
        cover_url = game_data.get('cover', {}).get('url', '')
        if cover_url:
            game_data['cover'] = cover_url.replace('t_thumb', 't_cover_big')

        return JsonResponse(game_data, safe=False)
    else:
        return JsonResponse({'error': 'Game not found'}, status=404)



def igdb_oauth_callback(request):
    # Extract the authorization code from the request parameters
    auth_code = request.GET.get('code')

    # Set up the request parameters for exchanging the authorization code for an access token
    token_url = 'https://id.twitch.tv/oauth2/token'
    params = {
        'client_id': settings.IGDB_CLIENT_ID,
        'client_secret': settings.IGDB_CLIENT_SECRET,
        'code': auth_code,
        'grant_type': 'authorization_code',
        'redirect_uri': settings.IGDB_REDIRECT_URI,
    }

    # Make a POST request to the IGDB API's token endpoint to exchange the authorization code for an access token
    response = requests.post(token_url, params=params)
    data = response.json()

    access_token = data.get('access_token')
    # Store the access token securely (e.g., in the user's session or database)
    request.session['igdb_access_token'] = access_token

    # Redirect the user to your frontend application
    return redirect(settings.FRONTEND_URL)

class UserRegistrationView(generics.CreateAPIView):
    serializer_class = UserRegistrationSerializer

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        refresh = RefreshToken.for_user(user)
        return Response(
            {
                'refresh': str(refresh),
                'access': str(refresh.access_token),
                'user': {
                    'id': user.id,
                    'username': user.username,
                    'email': user.email,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                },
            },
            status=status.HTTP_201_CREATED
        )


class UserLoginView(generics.CreateAPIView):
    serializer_class = UserLoginSerializer

    def post(self, request):
        serializer = self.serializer_class(data=request.data)
        serializer.is_valid(raise_exception=True)
        username = serializer.validated_data['username']
        password = serializer.validated_data['password']
        user = authenticate(username=username, password=password)
        if user:
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    'refresh': str(refresh),
                    'access': str(refresh.access_token),
                },
                status=status.HTTP_200_OK
            )
        else:
            return Response(
                {'detail': 'Invalid credentials'},
                status=status.HTTP_401_UNAUTHORIZED
            )
        
class UserProfileView(generics.RetrieveUpdateAPIView):
    serializer_class = UserProfileSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_object(self):
        return self.request.user
    
class CollectionGameDeleteView(generics.DestroyAPIView):
    queryset = CollectionGame.objects.all()
    permission_classes = [permissions.IsAuthenticated]

    def delete(self, request, *args, **kwargs):
        collection_id = self.kwargs['collection_id']
        game_id = self.kwargs['pk']

        try:
            game = CollectionGame.objects.get(collection_id=collection_id, game_id=game_id)
            game.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except CollectionGame.DoesNotExist:
            return Response(status=status.HTTP_404_NOT_FOUND)
        




Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}



Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\App.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import RegistrationForm from './RegistrationForm';
import LoginForm from './LoginForm';
import HomePage from './HomePage';
import NavigationBar from './NavigationBar';
import ProfilePage from './ProfilePage';
import GameDetailsPage from './GameDetailsPage';
import FavouritesPage from './FavouritesPage';
import CollectionsPage from './CollectionsPage';
import CollectionDetailsPage from './CollectionDetailsPage';
import UsersPage from './UsersPage';
import UserCollectionsPage from './UserCollectionsPage';
import ChartsPage from './ChartsPage';


const App = () => {
  const isAuthenticated = () => {
    const token = localStorage.getItem('accessToken');
    return token !== null;
  };

  // Create a wrapper component for protected routes
  const ProtectedRoute = ({ children }) => {
    return isAuthenticated() ? children : <Navigate to="/login" />;
  };

  return (
    <Router>
      <div>
        <NavigationBar />
        <Routes>
          <Route path="/" element={<Navigate to="/login" />} />
          <Route path="/login" element={<LoginForm />} />
          <Route path="/home" element={<ProtectedRoute><HomePage /></ProtectedRoute>} />
          <Route path="/register" element={<RegistrationForm />} />
          <Route path="/profile" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>} />
          <Route path="/game/:id" element={<ProtectedRoute><GameDetailsPage /></ProtectedRoute>} />
          <Route path="/favourites" element={<ProtectedRoute><FavouritesPage /></ProtectedRoute>} />
          <Route path="/collections" element={<ProtectedRoute><CollectionsPage /></ProtectedRoute>} />
          <Route path="/collections/:collectionId" element={<ProtectedRoute><CollectionDetailsPage /></ProtectedRoute>} />
          <Route path="/users" element={<ProtectedRoute><UsersPage /></ProtectedRoute>} />
          <Route path="/users/:userId/collections" element={<ProtectedRoute><UserCollectionsPage /></ProtectedRoute>} />
          <Route path="/charts" element={<ProtectedRoute><ChartsPage /></ProtectedRoute>} />
        </Routes>
        <ToastContainer />
      </div>
    </Router>
  );
};

export default App;



Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\ChartsPage.css
.charts-page {
    text-align: center;
    padding: 20px;
  }
  
  .charts-heading {
    font-size: 32px;
    margin-bottom: 20px;
    color: #000000;
  }
  
  .collection-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .collection-item {
    margin-bottom: 20px;
    width: 1000px;
    background-color: #212121;
    color: rgb(230, 230, 230);
    border-radius: 4px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .collection-item:hover {
    transform: translateY(-5px);
    background-color: rgb(61, 61, 61);
  }
  
  .collection-item-link {
    text-decoration: none;
    color: black;
  }
  
  .collection-item-link:hover {
    text-decoration: none;
  }
  
  .collection-score {
    font-size: 18px;
    font-weight: bold;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\ChartsPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import './ChartsPage.css';

const ChartsPage = () => {
  const [topCollections, setTopCollections] = useState([]);

  useEffect(() => {
    fetchTopCollections();
  }, []);

  const fetchTopCollections = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/top-collections/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setTopCollections(response.data);
    } catch (error) {
      console.error('Error fetching top collections:', error);
    }
  };

  return (
    <div className="charts-page">
      <h1 className="charts-heading animated-element">Top Collections</h1>
      <h4 className="animated-element">Discover the most upvoted collections on ATLAS.</h4>
      <h6 className="animated-element">Minimum score requirement (3)</h6>
      <ul className="collection-list animated-element">
        {topCollections.map((collection) => (
          <Link
            key={collection.id}
            to={`/collections/${collection.id}`}
            className="collection-item-link"
          >
            <li className="collection-item">
              <span className="collection-title">{collection.title}</span>
              <span className="collection-score">Score: {collection.upvote_count}</span>
            </li>
          </Link>
        ))}
      </ul>
    </div>
  );
};

export default ChartsPage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\CollectionDetailsPage.css
.collection-details-page {
    padding: 20px;
    text-align: center;
  }
  
  .collection-title {
    font-size: 32px;
    margin-bottom: 10px;
  }
  
  .collection-description {
    font-size: 18px;
    margin-bottom: 20px;
  }
  
  .delete-button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #f44336;
    color: #ffffff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: 20px;
  }
  
  .games-heading {
    font-size: 24px;
    margin-bottom: 20px;
  }
  
  .game-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .game-item {
    margin-bottom: 20px;
    border: 1px solid rgba(255, 255, 255, 0.833);
    background-color: rgb(19, 19, 19);
    color: rgb(223, 223, 223);
    padding: 10px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    transition: transform 0.2s ease;
    width: 80%;
    max-width: 1200px;
  }

  .game-item:hover {
    transform: translateY(-5px);
  }
  
  .game-details {
    flex: 1;
    text-align: left;
  }
  
  .game-item img {
    width: 25%;
    height: auto;
    margin-right: 20px;
    border: 3px solid rgba(255, 255, 255, 0.833);
    border-radius: 4px;
  }
  
  .game-item h3 {
    font-size: 24px;
    margin-bottom: 10px;
  }
  
  .game-item p {
    margin-bottom: 10px;
  }

  .upvote-score {
    font-size: 18px;
    margin-left: 10px;
  }
  
  .upvote-button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #00fd59;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 20px;
  }
  
  .upvote-button:hover {
    background-color: #00952f;
  }

  .delete-button,
  .edit-button {
  padding: 10px 20px;
  font-size: 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 20px;
  transition: background-color 0.3s ease;
}

.delete-button {
  background-color: #f44336;
  color: #ffffff;
}

.delete-button:hover {
  background-color: #b90909;
  color: black;
}

.edit-button {
  background-color: #007bff;
  color: #ffffff;
  margin-left: 10px;
}

.edit-button:hover {
  background-color: #0056b3;
}

.game-item button {
  margin-left: 10px;
  font-size: 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  background-color: #ff6200;
  color: #ffffff;
  transition: background-color 0.3s ease;
}

.game-item button:hover {
  background-color: #b31919;
  color: black;
}


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\CollectionDetailsPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import Modal from 'react-modal';
import './CollectionDetailsPage.css';
import { toast } from 'react-toastify';

const CollectionDetailsPage = () => {
  const { collectionId } = useParams();
  const [collection, setCollection] = useState(null);
  const [games, setGames] = useState([]);
  const navigate = useNavigate();
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isOwner, setIsOwner] = useState(false);
  const [upvoteCount, setUpvoteCount] = useState(0);
  const [isUpvoted, setIsUpvoted] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [editedDescription, setEditedDescription] = useState('');
  const [editedGames, setEditedGames] = useState([]);

  useEffect(() => {
    fetchCollectionDetails();
    fetchCollectionGames();
    checkCollectionOwnership();
    fetchUpvoteStatus();
  }, [collectionId]);

  useEffect(() => {
    setEditedGames(games);
  }, [games]);

  const fetchCollectionDetails = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/collections/${collectionId}/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setCollection(response.data);
    } catch (error) {
      console.error('Error fetching collection details:', error);
    }
  };

  const fetchCollectionGames = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/collections/${collectionId}/games/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      const gameIds = response.data.map((game) => game.game_id);
      const gameDetailsResponse = await axios.get(`http://localhost:8000/api/games/?ids=${gameIds.join(',')}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setGames(gameDetailsResponse.data);
    } catch (error) {
      console.error('Error fetching collection games:', error);
    }
  };

  const checkCollectionOwnership = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/collections/${collectionId}/check-ownership/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setIsOwner(response.data.is_owner);
    } catch (error) {
      console.error('Error checking collection ownership:', error);
    }
  };

  const openDeleteModal = () => {
    setIsDeleteModalOpen(true);
  };

  const closeDeleteModal = () => {
    setIsDeleteModalOpen(false);
  };

  const openEditModal = () => {
    setEditedTitle(collection.title);
    setEditedDescription(collection.description);
    setIsEditModalOpen(true);
  };
  
  const closeEditModal = () => {
    setIsEditModalOpen(false);
  };

  const checkGameOwnership = () => {
    return isOwner;
  };

  const updateCollection = async () => {
    try {
      await axios.put(`http://localhost:8000/api/collections/${collectionId}/`, {
        title: editedTitle,
        description: editedDescription,
      }, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      closeEditModal();
      fetchCollectionDetails();
      toast.success('Collection updated successfully!');
    } catch (error) {
      console.error('Error updating collection:', error);
      toast.error('An error occurred while updating the collection.');
    }
  };
  
  const deleteCollection = async () => {
    try {
      await axios.delete(`http://localhost:8000/api/collections/${collectionId}/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      navigate('/collections');
      toast.success('Collection deleted successfully!');
    } catch (error) {
      console.error('Error deleting collection:', error);
      toast.error('An error occurred while deleting the collection.');
    }
  };

  const handleGameDelete = async (gameId) => {
    try {
      // Remove the game from the editedGames state
      setEditedGames(editedGames.filter((game) => game.id !== gameId));
      // Send a delete request to the backend
      const response = await axios.delete(`http://localhost:8000/api/collections/${collectionId}/games/${gameId}/delete/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      // Fetch the updated list of games from the backend
      fetchCollectionGames();
      toast.success(response.data.message);
    } catch (error) {
      console.error('Error deleting game from collection:', error);
      if (error.response && error.response.data && error.response.data.error) {
        toast.error(error.response.data.error);
      } else {
        toast.error('An error occurred while removing the game from the collection.');
      }
    }
  };

  const fetchUpvoteStatus = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/collections/${collectionId}/upvote/`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setIsUpvoted(response.data.is_upvoted);
      setUpvoteCount(response.data.upvote_count);
    } catch (error) {
      console.error('Error fetching upvote status:', error);
    }
  };

const toggleUpvote = async () => {
  try {
    const response = await axios.post(`http://localhost:8000/api/collections/${collectionId}/upvote/`, null, {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
      },
    });

    setIsUpvoted(response.data.message === 'Upvote added');
    setUpvoteCount(response.data.upvote_count);
    toast.success(response.data.message);
  } catch (error) {
    console.error('Error upvoting collection:', error);
    toast.error('An error occurred while upvoting the collection.');
  }
};

  if (!collection) {
    return <div>Loading...</div>;
  }

  return (
    <div className="collection-details-page">
      <h1 className="collection-title">{collection.title}</h1>
      <p className="collection-description">{collection.description}</p>
      {isOwner && (
        <>
          <button className="delete-button" onClick={openDeleteModal}>Delete Collection</button>
          <button className="edit-button" onClick={openEditModal}>Edit Collection</button>
        </>
      )}
      <h2 className="games-heading">Games <span className="upvote-score">Score: {upvoteCount}</span></h2>
      <ul className="game-list">
        {editedGames.map((game) => (
          <li key={game.id} className="game-item">
            <img src={game.cover} alt={game.name} />
            <div className="game-details">
              <h3>{game.name}</h3>
              <p>{game.summary}</p>
              <p>Genres: {game.genres}</p>
              <p>Platforms: {game.platforms}</p>
            </div>
            {checkGameOwnership() && (
              <button onClick={() => handleGameDelete(game.id)}>Delete</button>
            )}
          </li>
        ))}
      </ul>
      {!isOwner && (
        <button className="upvote-button" onClick={toggleUpvote}>
          {isUpvoted ? 'Downvote' : 'Upvote'}
        </button>
      )}
  
      <Modal
        isOpen={isDeleteModalOpen}
        onRequestClose={closeDeleteModal}
        contentLabel="Delete Collection"
        style={{
          content: {
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            backgroundColor: '#fff',
            borderRadius: '8px',
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            padding: '20px',
          },
          overlay: {
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
          },
        }}
      >
        <h2>Delete Collection</h2>
        <p>Are you sure you want to delete this collection?</p>
        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
          <button onClick={deleteCollection} style={{ marginRight: '10px', backgroundColor: '#f44336', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Delete</button>
          <button onClick={closeDeleteModal} style={{ backgroundColor: '#ccc', color: '#000', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Cancel</button>
        </div>
      </Modal>
      <Modal
        isOpen={isEditModalOpen}
        onRequestClose={closeEditModal}
        contentLabel="Edit Collection"
        style={{
          content: {
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            backgroundColor: '#fff',
            borderRadius: '8px',
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            padding: '20px',
          },
          overlay: {
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
          },
        }}
      >
        <h2>Edit Collection</h2>
        <input
          type="text"
          placeholder="Title"
          value={editedTitle}
          onChange={(e) => setEditedTitle(e.target.value)}
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        />
        <textarea
          placeholder="Description"
          value={editedDescription}
          onChange={(e) => setEditedDescription(e.target.value)}
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        ></textarea>
        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
          <button onClick={updateCollection} style={{ marginRight: '10px', backgroundColor: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Save</button>
          <button onClick={closeEditModal} style={{ backgroundColor: '#ccc', color: '#000', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Cancel</button>
        </div>
      </Modal>
    </div>
  );
};

export default CollectionDetailsPage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\CollectionsPage.css
.collections-page {
    text-align: center;
    padding: 20px;
  }
  
  .collections-heading {
    font-size: 32px;
    margin-bottom: 20px;
    color: #000000;
  }
  
  .collection-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .collection-item {
    margin-bottom: 20px;
    width: 1000px;
    background-color: #212121;
    color: rgb(230, 230, 230);
    border-radius: 4px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
    cursor: pointer;
  }
  
  .collection-item:hover {
    transform: translateY(-5px);
    background-color: rgb(61, 61, 61);
  }
  
  .collection-item-link {
    text-decoration: none;
    color: black;
  }
  
  .collection-item-link:hover {
    text-decoration: none;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\CollectionsPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import './CollectionsPage.css';

const CollectionsPage = () => {
  const [collections, setCollections] = useState([]);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    fetchCollections();
    fetchUserName();
  }, []);

  const fetchCollections = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/collections/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setCollections(response.data);
    } catch (error) {
      console.error('Error fetching collections:', error);
    }
  };

  const fetchUserName = () => {
    const user = JSON.parse(localStorage.getItem('user'));
    if (user && user.first_name) {
      setUserName(user.first_name);
    }
  };

  return (
    <div className="collections-page">
      <h1 className="collections-heading animated-element">{userName}'s Collections</h1>
      <h4 className="animated-element">This is where your curated collections are stored.</h4>
      <ul className="collection-list animated-element">
        {collections.map((collection) => (
          <Link
            key={collection.id}
            to={`/collections/${collection.id}`}
            className="collection-item-link"
          >
            <li className="collection-item">
              <span className="collection-title">{collection.title}</span>
            </li>
          </Link>
        ))}
      </ul>
    </div>
  );
};

export default CollectionsPage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\FavouritesPage.css
@keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animated-element {
    animation: fadeInUp 1s ease 0s forwards;
  }

.favourites-page {
    text-align: center;
    padding: 20px;
  }
  
  .favourites-heading {
    font-size: 32px;
    margin-bottom: 20px;
    color: #000000;
  }
  
  .favourites-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-gap: 20px;
  }
  
  .favourite-card {
    border: 1px solid rgba(0, 0, 0, 0.833);
    background-color: rgb(233, 198, 0);
    color: rgb(20, 20, 20);
    border-radius: 4px;
    padding: 10px;
    text-align: center;
    transition: transform 0.2s ease;
  }
  
  .favourite-card:hover {
    transform: translateY(-5px);
  }
  
  .favourite-card img {
    width: 100%;
    height: auto;
    margin-bottom: 10px;
    border: 3px solid rgba(255, 255, 255, 0.833);
    border-radius: 4px;
  }
  
  .favourite-card h3 {
    font-size: 18px;
    margin-bottom: 10px;
  }
  
  .favourite-card p {
    margin-bottom: 5px;
  }
  
  .rating-box {
    margin-top: 10px;
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
  }
  
  .rating-green {
    background-color: #4caf50;
    color: #fff;
  }
  
  .rating-orange {
    background-color: #ff9800;
    color: #fff;
  }
  
  .rating-red {
    background-color: #f44336;
    color: #fff;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\FavouritesPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './FavouritesPage.css';

const FavouritesPage = () => {
  const [favourites, setFavourites] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchFavourites();
  }, []);

  const fetchFavourites = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/favourites/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setFavourites(response.data);
    } catch (error) {
      console.error('Error fetching favourites:', error);
    }
  };

  const showGameDetails = (gameId) => {
    navigate(`/game/${gameId}`);
  };

  return (
    <div className="favourites-page">
      <h1 className="favourites-heading animated-element">My Favourites</h1>
      <h4 className="animated-element">Your own hall of fame where you keep your cherished titles.</h4>
      <div className="favourites-grid animated-element">
        {favourites.map((game) => (
          <div key={game.id} className="favourite-card" onClick={() => showGameDetails(game.id)}>
            <img src={game.cover.url} alt={game.name} />
            <h3>{game.name}</h3>
        </div>
        ))}
      </div>
    </div>
  );
};

function getRatingClass(rating) {
  if (rating >= 70) {
    return 'rating-green';
  } else if (rating >= 40) {
    return 'rating-orange';
  } else if (rating < 40) {
    return 'rating-red';
  } else {
    return '';
  }
}

export default FavouritesPage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\GameDetailsPage.css
@keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

.add-to-collections-button,
.add-to-favourites-button {
  padding: 10px 20px;
  font-size: 16px;
  background-color: #414141;
  color: #ffffff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

.add-to-collections-button:hover,
.add-to-favourites-button:hover {
  background-color: #d1d1d1;
}

.game-details-page {
    display: flex;
    flex-direction: column;
    align-items: center;
    animation: fadeInUp 1s ease 0s forwards;
    background-color: rgb(16, 16, 16);
    color: rgb(186, 186, 186);
  }
  
  
  .game-details-page.hide {
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }

  .game-details-header {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
  }

  .game-cover-art {
    margin-top: 5%;
    width: 100%;
    max-width: 300px;
    margin-right: 20px;
    border: 1px solid rgba(255, 255, 255, 0.833);
  }
  
  .game-details-content {
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    

  }
  
  .rating-box {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    margin-bottom: 10px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid;
  }

  #rating-box-2 {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    margin-bottom: 10px;
    width: 150px;
    box-sizing: border-box;
    border: 1px solid;
  }
  
  .game-videos {
    margin-top: 30px;
  }
  
  .game-videos h2 {
    font-size: 20px;
    margin-bottom: 10px;
  }
  
  .game-videos .video-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 20px;
  }
  
  .game-videos .video-item {
    position: relative;
    padding-top: 180px;
    padding-left: 330px;
    border: 1px solid rgba(255, 255, 255, 0.833);
    overflow: hidden;
  }

  .game-videos iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .game-websites {
    margin-top: 30px;
  }
  
  .game-websites h2 {
    display: flex;
    flex-direction: column; /* Stack children vertically */
    align-items: center; /* Center items horizontally in the container */
    text-align: center; /* Center text for all children */
    width: 100%; /* Full width of the container */
    max-width: 1200px; /* Max width to prevent excessive horizontal stretching */
    margin: 0 auto; /* Center the entire block horizontally */
    
  }
  
  .game-websites a {
    display: flex;
    align-items: left; /* Center items horizontally in the container */
    text-align: left; /* Center text for all children */
    width: 100%; /* Full width of the container */
    color: white;
  }
  
  .game-websites a:hover {
    text-decoration: underline;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\GameDetailsPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useParams } from 'react-router-dom';
import Modal from 'react-modal';
import './GameDetailsPage.css';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const GameDetailsPage = () => {
  const { id } = useParams();
  const [gameDetails, setGameDetails] = useState(null);
  const [isFavourite, setIsFavourite] = useState(false);
  const [isCollectionModalOpen, setIsCollectionModalOpen] = useState(false);
  const [userCollections, setUserCollections] = useState([]);
  const [selectedCollectionId, setSelectedCollectionId] = useState('');
  const [newCollectionTitle, setNewCollectionTitle] = useState('');
  const [newCollectionDescription, setNewCollectionDescription] = useState('');

  useEffect(() => {
    fetchGameDetails();
    checkFavouriteStatus();
    fetchUserCollections();
  }, [id]);

  const fetchGameDetails = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/games/${id}/`);
      const details = response.data;
      const releaseDate = details.first_release_date ? new Date(details.first_release_date * 1000).toLocaleDateString() : 'No release date';
      const genres = details.genres ? details.genres.map(genre => genre.name).join(', ') : 'No genres listed';
      const platforms = details.platforms ? details.platforms.map(platform => platform.name).join(', ') : 'No platforms listed';
      const summary = details.summary || 'No summary available.';
      const videos = details.videos ? details.videos.map(video => ({
        videoId: video.video_id
      })) : [];

      const websites = details.websites ? details.websites.map(site => ({
        url: site.url
      })) : [];

      setGameDetails({
        ...details,
        first_release_date: releaseDate,
        genres,
        platforms,
        summary,
        videos,
        websites,
      });
    } catch (error) {
      console.error('Error fetching game details:', error);
    }
  };

  const checkFavouriteStatus = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/check-favourite/?game_id=${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setIsFavourite(response.data.is_favourite);
    } catch (error) {
      console.error('Error checking favourite status:', error);
    }
  };

  const toggleFavourite = async () => {
    try {
      await axios.post(
        'http://localhost:8000/api/toggle-favourite/',
        { game_id: id },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
          },
        }
      );
      setIsFavourite(!isFavourite);
    } catch (error) {
      console.error('Error toggling favourite:', error);
    }
  };

  const fetchUserCollections = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/collections/', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setUserCollections(response.data);
    } catch (error) {
      console.error('Error fetching user collections:', error);
    }
  };

  const openCollectionModal = () => {
    setIsCollectionModalOpen(true);
  };

  const closeCollectionModal = () => {
    setIsCollectionModalOpen(false);
    setSelectedCollectionId('');
    setNewCollectionTitle('');
    setNewCollectionDescription('');
  };

  const addToCollection = async () => {
    if (selectedCollectionId) {
      try {
        await axios.post(`http://localhost:8000/api/collections/${selectedCollectionId}/games/`, {
          game_id: gameDetails.id,
        }, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
          },
        });
        closeCollectionModal();
        fetchUserCollections();
        toast.success('Game added to collection successfully!');
      } catch (error) {
        console.error('Error adding game to collection:', error);
        toast.error('An error occurred while adding the game to the collection.');
      }
    } else if (newCollectionTitle) {
      try {
        const response = await axios.post('http://localhost:8000/api/collections/', {
          title: newCollectionTitle,
          description: newCollectionDescription,
        }, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
          },
        });
        const newCollectionId = response.data.id;
        await axios.post(`http://localhost:8000/api/collections/${newCollectionId}/games/`, {
          game_id: gameDetails.id,
        }, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
          },
        });
        closeCollectionModal();
        fetchUserCollections();
        toast.success('Game added to new collection successfully!');
      } catch (error) {
        console.error('Error creating new collection:', error);
        toast.error('An error occurred while creating a new collection.');
      }
    }
  };

  if (!gameDetails) {
    return <div>Loading game details...</div>;
  }

  return (
    <div className="game-details-page">
      <div className="game-details-header">
        {gameDetails.cover && <img src={gameDetails.cover} alt={`${gameDetails.name} cover`} className="game-cover-art" />}
        <h1 className="game-title"><i>{gameDetails.name}</i></h1>
      </div>
      <div className="game-details-content">
        <p><strong>Release Date:</strong> {gameDetails.first_release_date}</p>
        <p><strong>Genre:</strong> {gameDetails.genres}</p>
        <p><strong>Platforms:</strong> {gameDetails.platforms}</p>
        <p><strong>Summary:</strong> {gameDetails.summary}</p>
        <div className={`rating-box ${getRatingClass(gameDetails.rating)}`} id="rating-box-2">
          <strong>Rating:</strong> {gameDetails.rating ? gameDetails.rating.toFixed(2) : 'Not Rated'}
        </div>
        <button className="add-to-favourites-button" onClick={toggleFavourite}>{isFavourite ? 'Remove from Favourites' : 'Add to Favourites'}</button>
        <button className="add-to-collections-button" onClick={openCollectionModal}>Add to Collection</button>
      </div>
      <Modal
        isOpen={isCollectionModalOpen}
        onRequestClose={closeCollectionModal}
        contentLabel="Add to Collection"
        style={{
          content: {
            top: '50%',
            left: '50%',
            right: 'auto',
            bottom: 'auto',
            marginRight: '-50%',
            transform: 'translate(-50%, -50%)',
            backgroundColor: '#fff',
            borderRadius: '8px',
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            padding: '20px',
          },
          overlay: {
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
          },
        }}
      >
        <h2>Add to Collection</h2>
        <select
          value={selectedCollectionId}
          onChange={(e) => setSelectedCollectionId(e.target.value)}
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        >
          <option value="">Select Collection</option>
          {userCollections.map((collection) => (
            <option key={collection.id} value={collection.id}>
              {collection.title}
            </option>
          ))}
        </select>
        <input
          type="text"
          placeholder="New Collection Title"
          value={newCollectionTitle}
          onChange={(e) => setNewCollectionTitle(e.target.value)}
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        />
        <textarea
          placeholder="New Collection Description"
          value={newCollectionDescription}
          onChange={(e) => setNewCollectionDescription(e.target.value)}
          style={{
            width: '100%',
            padding: '10px',
            marginBottom: '10px',
            border: '1px solid #ccc',
            borderRadius: '4px',
          }}
        ></textarea>
        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
          <button onClick={addToCollection} style={{ marginRight: '10px', backgroundColor: '#007bff', color: '#fff', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Add</button>
          <button onClick={closeCollectionModal} style={{ backgroundColor: '#ccc', color: '#000', border: 'none', padding: '8px 16px', borderRadius: '4px', cursor: 'pointer' }}>Cancel</button>
        </div>
      </Modal>
      <div className="game-videos">
        <h2>Videos</h2>
        <div className="video-grid">
          {gameDetails.videos.map((video, index) => (
            <div key={index} className="video-item">
              <iframe
                title={`Video ${index}`}
                width="300"
                height="169"
                src={`https://www.youtube.com/embed/${video.videoId}`}
                allowFullScreen
              ></iframe>
            </div>
          ))}
        </div>
      </div>
      <div className="game-websites">
        <h2>Websites</h2>
        {gameDetails.websites.map((website, index) => (
          <a key={index} href={website.url} target="_blank" rel="noopener noreferrer">{website.url}</a>
        ))}
      </div>
    </div>
  );
};

function getRatingClass(rating) {
  if (rating >= 70) {
    return 'rating-green';
  } else if (rating >= 40) {
    return 'rating-orange';
  } else if (rating < 40) {
    return 'rating-red';
  } else {
    return '';
  }
}

export default GameDetailsPage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\HomePage.css
@keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }


.animated-element {
  animation: fadeInUp 1s ease 0s forwards;
}
button.active {
    background-color: #212121;
    color: white;
  }

.home-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
/* .search-container { 
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 20px;
 } */

.search-bar {
    display: flex;
    margin-bottom: 10px;
}
  
.search-bar input {
    flex: 1;
    padding: 10px;
    font-size: 16px;
}
  
.search-bar button {
    padding: 10px 20px;
    font-size: 16px;
    background-color: #007bff;
    color: #fff;
    border: none;
    cursor: pointer;
}
  

.game-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-gap: 20px;
}
  
.game-card {
    border: 1px solid rgba(255, 255, 255, 0.833);
    background-color: rgb(19, 19, 19);
    color: rgb(223, 223, 223);
    border-radius: 4px;
    padding: 10px;
    text-align: center;
    transition: transform 0.2s ease;
    
 }

.game-card:hover {
    border: 1px solid rgba(255, 255, 255, 0.833);
    background-color: rgb(56, 56, 56);
    color: rgb(223, 223, 223);
    border-radius: 4px;
    padding: 10px;
    text-align: center;
}

  .game-card h3 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: clamp(20px, 4vw, 24px);
    margin-bottom: 10px;
    line-height: 1.2; 
    max-height: 2.4em; 
    
 }

  .game-card.animated-element:hover {
    transform: scale(1.03);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

  .rating-box {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    margin-bottom: 10px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid;
    
  }
  
  .game-card img {
    width: 100%;
    height: auto;
    margin-bottom: 10px;
    border: 3px solid rgba(255, 255, 255, 0.833);
    border-radius: 4px;
  }

  
  /* .pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
  }
  
  .pagination button {
    padding: 8px 12px;
    margin: 0 5px;
    font-size: 14px;
    background-color: #f0f0f0;
    border: none;
    cursor: pointer;
  }
  
  .pagination button.active {
    background-color: #007bff;
    color: #fff;
  } */



.rating-green {
    background-color: #4CAF50;
    color: rgb(223, 223, 223);
}

.rating-orange {
    background-color: #ffaa00;
    color: rgb(255, 255, 255);
}

.rating-red {
    background-color: #F44336;
    color: rgb(255, 255, 255);
}


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\HomePage.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './HomePage.css';
import LoadingSpinner from './LoadingSpinner';

const HomePage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [searchType, setSearchType] = useState('title');
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);

  // This function, handleSearch, is an asynchronous function that is triggered when the 'Enter' key is pressed.
  // It sets a loading state to true, indicating that a search operation is in progress.
  // It then makes a GET request to a local search API, passing in a search query and search type as parameters.
  // The search results are then stored in state using the setSearchResults function.
  // If there are any results, a success message is displayed using the toast.success function.
  // If there are no results, an informational message is displayed using the toast.info function.
  // If an error occurs during the search operation, it is caught and logged to the console, and an error message is displayed to the user.
  // Finally, the loading state is set to false, indicating that the search operation has completed.
  const handleSearch = async (e) => {
    if (e.key === 'Enter') {
      setIsLoading(true);
      try {
        const response = await axios.get(`http://localhost:8000/api/search/?query=${searchQuery}&type=${searchType}`);
        setSearchResults(response.data.results);
        if (response.data.results.length > 0) {
          toast.success('Search results found!');
        } else {
          toast.info('No search results found.');
        }
      } catch (error) {
        console.error('Error searching games:', error);
        toast.error('An error occurred while searching for games.');
      }
      setIsLoading(false);
    }
  };

  const showGameDetails = (gameId) => {
    navigate(`/game/${gameId}`);
  };

  return (
    <div className="home-page">
      <h1 className="animated-element">Welcome to ATLAS.</h1>
      <h4 className="animated-element">Search for your favourite games across our database and build your personalised collection.</h4>
      <div className="search-type-buttons animated-element">
        <button onClick={() => setSearchType('title')} className={searchType === 'title' ? 'active' : ''}>Title</button>
        <button onClick={() => setSearchType('developer')} className={searchType === 'developer' ? 'active' : ''}>Developer/Publisher</button>
      </div>
      <div className="search-container animated-element">
        <div className="search-bar">
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyPress={handleSearch}
            placeholder={`Search by ${searchType}...`}
          />
        </div>
       {isLoading && <LoadingSpinner />}
      </div>
      

      <div className="game-grid">
        {searchResults.map((game) => (
          <div key={game.id} className="game-card animated-element" onClick={() => showGameDetails(game.id)}>
            <img src={game.cover} alt={game.name} />
            <div style={{ minHeight: '70px' }}>
              <h3>{game.name}</h3>
            </div>
            <div className={`rating-box ${getRatingClass(game.rating)}`}>
              Rating: {typeof game.rating === 'number' ? game.rating.toFixed(2) : 'Not Rated'}
            </div>
            <p>Developers: {game.developers.join(', ')}</p>
            <p>Publishers: {game.publishers.join(', ')}</p>
            <p>Available on: {game.platforms.join(', ')}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

function getRatingClass(rating) {
  if (rating >= 70) {
    return 'rating-green';
  } else if (rating >= 40) {
    return 'rating-orange';
  } else if (rating < 40) {
    return 'rating-red';
  } else {
    return '';
  }
}

export default HomePage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\index.css
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}



Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();



Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\LoadingSpinner.css
.loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    margin-bottom: 20px;
  }
  
  .spinner {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #000000;
    animation: spin 1s linear infinite;
    border-left: 20px;
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\LoadingSpinner.js
import React from 'react';
import './LoadingSpinner.css';

const LoadingSpinner = () => {
  return (
    <div className="loading-spinner">
      <div className="spinner"></div>
    </div>
  );
};

export default LoadingSpinner;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\LoginForm.css
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #ffffff;
    padding-bottom: 400px; /* adjust for page */
  }
  
  .login-form-container {
    background-color: #fff;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 2px solid #000;
  }
  
  .login-heading {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
  }
  
  .login-form {
    display: flex;
    flex-direction: column;
  }
  
  .form-group {
    margin-bottom: 20px;
  }
  
  .form-input {
    padding: 10px;
    border-radius: 20px;
    border: 1px solid #ccc;
    font-size: 16px;
  }
  
  .login-button {
    padding: 10px;
    border-radius: 20px;
    border: none;
    background-color: #0031f792;
    color: #ffffff;
    font-size: 16px;
    cursor: pointer;
  }
  
  .login-button:hover {
    /* background-color: #ffffff; */
    color: #000000;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\LoginForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import './LoginForm.css';

const LoginForm = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/login/', {
        username,
        password,
      });
      const { refresh, access } = response.data;
      localStorage.setItem('refreshToken', refresh);
      localStorage.setItem('accessToken', access);
      localStorage.setItem('user', JSON.stringify(response.data.user));

      console.log('Login successful');
      toast.success('Login successful');
      navigate('/home', { state: { isAuthenticated: true } });
    } catch (error) {
      console.error(error);
      toast.error('Login failed');
    }
  };

  return (
    <div className="login-container animated-element">
      <div className="login-form-container">
        <h2 className="login-heading">Login</h2>
        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <input
              type="text"
              placeholder="Username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="form-input"
            />
          </div>
          <button type="submit" className="login-button">Login</button>
        </form>
      </div>
    </div>
  );
};

export default LoginForm;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\NavigationBar.css
.navbar {
    background-color: #000000da;
    padding: 1rem;
  }
  
  .navbar-logo {
    height: 40px;
    width: auto;
    transition: transform 0.3s ease;
  }

  .navbar-logo:hover {
    transform: scale(1.1);
  }
  
  .navbar-brand {
    /* font-weight: bold; */
    font-size: 1.5rem;
    color: #ffffff;
    text-decoration: none;
    margin-left: 1rem;
  }
  
  .nav-link {
    color: #ffffff;
    text-decoration: none;
    padding: 0.5rem;
    border-radius: 4px;
    margin-right: 1rem;
  }
  
  .nav-link:hover {
    background-color: #ddd;
  }
  
  .logout-btn {
    background: none;
    border: none;
    color: #ffffff;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    margin-right: 1rem;
  }
  
  .logout-btn:hover {
    background-color: #ddd;
    color: black;
  }
  
  .navbar-nav {
    align-items: center;
  }
  
  .navbar-nav .nav-item:last-child {
    margin-right: 1rem;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\NavigationBar.js
import React from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import './NavigationBar.css';
import logo from './assets/atlaslogo.PNG';

const NavigationBar = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const isAuthenticated = location.state?.isAuthenticated || localStorage.getItem('accessToken') !== null;

  const handleLogout = () => {
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    navigate('/login', { state: { isAuthenticated: false } });
  };

  return (
    <nav className="navbar navbar-expand-md">
      <div className="container-fluid">
        <Link to="/home" className="navbar-brand">
          <img src={logo} alt="Logo" className="navbar-logo" />
        </Link>
        <button
          className="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
          aria-controls="navbarNav"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav ms-auto">
            {isAuthenticated ? (
              <>
                <li className="nav-item">
                  <Link to="/users" className="nav-link">Users</Link>
                </li>
                <li className="nav-item">
                <Link to="/charts" className="nav-link">Charts</Link>
                </li>
                <li className="nav-item">
                  <Link to="/collections" className="nav-link">Collections</Link>
                </li>
                <li className="nav-item">
                  <Link to="/favourites" className="nav-link">Favourites</Link>
                </li>
                <li className="nav-item">
                  <Link to="/profile" className="nav-link">Profile</Link>
                </li>
                <li className="nav-item">
                  <button className="logout-btn" onClick={handleLogout}>Logout</button>
                </li>
              </>
            ) : (
              <>
                <li className="nav-item">
                  <Link to="/login" className="nav-link">Login</Link>
                </li>
                <li className="nav-item">
                  <Link to="/register" className="nav-link">Register</Link>
                </li>
              </>
            )}
          </ul>
        </div>
      </div>
    </nav>
  );
};

export default NavigationBar;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\ProfilePage.css
@keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animated-element {
    animation: fadeInUp 1s ease 0s forwards;
  }

.profile-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #ffffff;
    padding-bottom: 300px;
  }
  
  .profile-form-container {
    background-color: #ffffff;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 2px solid #000;
  }
  
  .profile-heading {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
  }
  
  .profile-form {
    display: flex;
    flex-direction: column;
  }
  
  .profile-details {
    margin-bottom: 20px;
  }
  
  .profile-details p {
    margin-bottom: 10px;
  }
  
  .form-group {
    margin-bottom: 20px;
  }
  
  .form-input {
    padding: 10px;
    border-radius: 20px;
    border: 1px solid #ccc;
    font-size: 16px;
  }
  
  .button-group {
    display: flex;
    justify-content: space-between;
  }
  
  .edit-button,
  .apply-button,
  .cancel-button {
    padding: 10px;
    border-radius: 20px;
    border: none;
    font-size: 16px;
    cursor: pointer;
  }
  
  .edit-button {
    background-color: #00f79092;
    color: #ffffff;
  }
  
  .apply-button {
    background-color: #00ff6292;
    color: #ffffff;
  }
  
  .cancel-button {
    background-color: #f44336;
    color: #ffffff;
  }
  
  .edit-button:hover,
  .apply-button:hover,
  .cancel-button:hover {
    color: #000000;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\ProfilePage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './ProfilePage.css';

const ProfilePage = () => {
  const [profile, setProfile] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedProfile, setEditedProfile] = useState(null);
  const [isConfirmingPassword, setIsConfirmingPassword] = useState(false);
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const response = await axios.get('http://localhost:8000/api/profile/', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
          },
        });
        setProfile(response.data);
        setEditedProfile(response.data);
      } catch (error) {
        console.error('Error fetching profile:', error);
      }
    };

    fetchProfile();
  }, []);

  const handleEditClick = () => {
    setIsConfirmingPassword(true);
  };

  const handleCancelClick = () => {
    setIsEditing(false);
    setIsConfirmingPassword(false);
    setEditedProfile(profile);
    setPassword('');
    setConfirmPassword('');
  };

  const handleInputChange = (e) => {
    setEditedProfile({
      ...editedProfile,
      [e.target.name]: e.target.value,
    });
  };

//   const handlePasswordChange = (e) => {
//     setEditedProfile({
//       ...editedProfile,
//       password: e.target.value,
//     });
//   };

//   const handleConfirmPasswordChange = (e) => {
//     setEditedProfile({
//       ...editedProfile,
//       confirmPassword: e.target.value,
//     });
//   };

  const handleConfirmPasswordSubmit = async () => {
    if (password === confirmPassword) {
      try {
        const response = await axios.post(
          'http://localhost:8000/api/validate-password/',
          { password },
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
            },
          }
        );
        if (response.data.valid) {
          setIsConfirmingPassword(false);
          setIsEditing(true);
          setPassword('');
          setConfirmPassword('');
        } else {
          toast.error('Invalid password. Please try again.');
        }
      } catch (error) {
        console.error('Error validating password:', error);
        toast.error('An error occurred. Please try again.');
      }
    } else {
      toast.error('Passwords do not match. Please try again.');
    }
  };

  const handleApplyClick = async () => {
    try {
      if (password && password !== confirmPassword) {
        toast.error('Passwords do not match. Please try again.');
        return;
      }
      const requestData = {
        ...editedProfile,
        ...(password && { password }),
      };
      await axios.put('http://localhost:8000/api/profile/', requestData, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
        },
      });
      setProfile(editedProfile);
      setIsEditing(false);
      setPassword('');
      setConfirmPassword('');
      toast.success('Profile updated successfully.');
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('An error occurred. Please try again.');
    }
  };

  return (
    <div className="profile-container animated-element">
      <div className="profile-form-container">
        <h1 className="profile-heading">User Profile</h1>
        {profile ? (
          <div className="profile-form">
            {isConfirmingPassword ? (
            <>
                <div className="form-group">
                <input
                    type="password"
                    name="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="form-input"
                    placeholder="Password"
                />
                </div>
                <div className="form-group">
                <input
                    type="password"
                    name="confirmPassword"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="form-input"
                    placeholder="Confirm Password"
                />
                </div>
                <div className="button-group">
                <button onClick={handleConfirmPasswordSubmit} className="apply-button">
                    Confirm
                </button>
                <button onClick={handleCancelClick} className="cancel-button">
                    Cancel
                </button>
                </div>
            </>
            ): isEditing ?(
                <>
                <h2 className="profile-subheading">
                  Hi, {profile.first_name} {profile.last_name}!
                </h2>
                <div className="form-group">
                  <input
                    type="text"
                    name="username"
                    value={editedProfile.username}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="email"
                    name="email"
                    value={editedProfile.email}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    name="first_name"
                    value={editedProfile.first_name}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    name="last_name"
                    value={editedProfile.last_name}
                    onChange={handleInputChange}
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="password"
                    name="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="form-input"
                    placeholder="New Password"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="password"
                    name="confirmPassword"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="form-input"
                    placeholder="Confirm New Password"
                  />
                </div>
                <div className="button-group">
                  <button onClick={handleApplyClick} className="apply-button">
                    Apply
                  </button>
                  <button onClick={handleCancelClick} className="cancel-button">
                    Cancel
                  </button>
                </div>
              </>
            ):(
              <>
                <h2 className="profile-subheading">
                  Hi, {profile.first_name} {profile.last_name}!
                </h2>
                <div className="profile-details">
                  <p>Username: {profile.username}</p>
                  <p>Email: {profile.email}</p>
                </div>
                <button onClick={handleEditClick} className="edit-button">
                  Edit
                </button>
              </>
            )}
          </div>
        ):(
          <p>Loading profile...</p>
        )}
      </div>
    </div>
  );
};

export default ProfilePage;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\RegistrationForm.css
.registration-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #ffffff;
    padding-bottom: 132px;
  }
  
  .registration-form-container {
    background-color: #fff;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    border: 2px solid #000;
  }
  
  .registration-heading {
    text-align: center;
    margin-bottom: 20px;
    color: #333;
  }
  
  .registration-form {
    display: flex;
    flex-direction: column;
  }
  
  .form-group {
    margin-bottom: 20px;
  }
  
  .form-input {
    padding: 10px;
    border-radius: 20px;
    border: 1px solid #ccc;
    font-size: 16px;
  }
  
  .registration-button {
    padding: 10px;
    border-radius: 20px;
    border: none;
    background-color: #0031f792;
    color: #ffffff;
    font-size: 16px;
    cursor: pointer;
  }
  
  .registration-button:hover {
    color: #000000;
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\RegistrationForm.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import './RegistrationForm.css';

const RegistrationForm = () => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [password2, setPassword2] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:8000/api/register/', {
        first_name: firstName,
        last_name: lastName,
        username: username,
        email,
        password,
        password2,
      });
      const { refresh, access, user } = response.data;
      localStorage.setItem('refreshToken', refresh);
      localStorage.setItem('accessToken', access);
      localStorage.setItem('user', JSON.stringify(user));
      console.log('Registration successful');
      toast.success('Registration successful');
      navigate('/home');
    } catch (error) {
      console.error('Registration error:', error.response);
      toast.error('Registration failed');
    }
  };

  return (
    <div className="registration-container animated-element">
      <div className="registration-form-container">
        <h2 className="registration-heading">Register</h2>
        <form onSubmit={handleSubmit} className="registration-form">
          <div className="form-group">
            <input
              type="text"
              placeholder="First Name"
              value={firstName}
              onChange={(e) => setFirstName(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="text"
              placeholder="Last Name"
              value={lastName}
              onChange={(e) => setLastName(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="text"
              placeholder="Username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="form-input"
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              placeholder="Confirm Password"
              value={password2}
              onChange={(e) => setPassword2(e.target.value)}
              className="form-input"
            />
          </div>
          <button type="submit" className="registration-button">Register</button>
        </form>
      </div>
    </div>
  );
};

export default RegistrationForm;


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\UserCollectionsPage.css
.user-collections-heading {
    padding: 20px;
    text-align: center;
  }
  
/* .user-collections-page {
    text-align: center;
    padding: 20px;
  }
  
  .collection-list {
    list-style-type: none;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .collection-item {
    margin-bottom: 20px;
    width: 300px;
    background-color: #f1f1f1;
    border-radius: 4px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease;
    cursor: pointer;
  }
  
  .collection-item:hover {
    transform: translateY(-5px);
    background-color: rgb(207, 207, 207);
  }
  
  .collection-title {
    font-size: 24px;
    color: #000000;
    text-decoration: none;
  }
  
  .collection-title:hover {
    text-decoration: underline;
  } */


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\UserCollectionsPage.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link, useParams } from 'react-router-dom';
import './UserCollectionsPage.css';

const UserCollectionsPage = () => {
  const { userId } = useParams();
  const [collections, setCollections] = useState([]);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    fetchUserCollections();
    fetchUserName();
  }, [userId]);

  const fetchUserCollections = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/users/${userId}/collections/`);
      setCollections(response.data);
    } catch (error) {
      console.error('Error fetching user collections:', error);
    }
  };

  const fetchUserName = async () => {
    try {
      const response = await axios.get(`http://localhost:8000/api/users/${userId}/`);
      setUserName(response.data.username);
    } catch (error) {
      console.error('Error fetching user name:', error);
    }
  };

  return (
    <div className="user-collections-page">
      <h1 className="animated-element user-collections-heading">{userName}'s Collections</h1>
      <ul className="collection-list animated-element">
        {collections.map((collection) => (
          <Link
            key={collection.id}
            to={`/collections/${collection.id}`}
            className="collection-item-link"
          >
            <li className="collection-item">
              <span className="collection-title">{collection.title}</span>
            </li>
          </Link>
        ))}
      </ul>
    </div>
  );
};

export default UserCollectionsPage;



Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\UsersPage.css
@keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animated-element {
    animation: fadeInUp 1s ease 0s forwards;
  }

.users-page {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .search-bar {
    display: flex;
    margin-bottom: 20px;
  }
  
  .search-bar input {
    flex: 1;
    padding: 10px;
    font-size: 16px;
  }
  
  .user-list {
    list-style-type: none;
    padding: 0;
  }
  
  .user-item {
    border: 1px solid rgba(255, 255, 255, 0.833);
    background-color: rgb(44, 44, 44);
    color: rgb(223, 223, 223);
    border-radius: 4px;
    padding: 10px;
    margin-bottom: 10px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .user-item:hover {
    background-color: rgb(56, 56, 56);
  }


Filename: C:\Users\maman\desktop\atlas\atlas\frontend\src\UsersPage.js
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './UsersPage.css';

const UsersPage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const navigate = useNavigate();

  const handleSearch = async (e) => {
    if (e.key === 'Enter') {
      try {
        const response = await axios.get(`http://localhost:8000/api/search-users/?query=${searchQuery}`);
        setSearchResults(response.data);
      } catch (error) {
        console.error('Error searching users:', error);
      }
    }
  };

  const showUserCollections = (userId) => {
    navigate(`/users/${userId}/collections`);
  };

  return (
    <div className="users-page">
      <h1 className="animated-element">Users</h1>
      <h4 className="animated-element">Search for users on ATLAS and see what game collections they've made.</h4>
      <div className="search-bar animated-element">
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          onKeyPress={handleSearch}
          placeholder="Search users..."
        />
      </div>
      <ul className="user-list">
        {searchResults.map((user) => (
          <li key={user.id} className="user-item" onClick={() => showUserCollections(user.id)}>
            {user.username}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default UsersPage;


